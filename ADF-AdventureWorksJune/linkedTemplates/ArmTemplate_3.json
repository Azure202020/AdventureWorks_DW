{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADF-AdventureWorksJune"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/df_SalesHeader')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SalesOrderHeader",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SalesOrderHeader",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tSalesOrderID as integer,\n\t\tRevisionNumber as integer,\n\t\tOrderDate as timestamp,\n\t\tDueDate as timestamp,\n\t\tShipDate as timestamp,\n\t\tStatus as integer,\n\t\tOnlineOrderFlag as boolean,\n\t\tSalesOrderNumber as string,\n\t\tPurchaseOrderNumber as string,\n\t\tAccountNumber as string,\n\t\tCustomerID as integer,\n\t\tSalesPersonID as integer,\n\t\tTerritoryID as integer,\n\t\tBillToAddressID as integer,\n\t\tShipToAddressID as integer,\n\t\tShipMethodID as integer,\n\t\tCreditCardID as integer,\n\t\tCreditCardApprovalCode as string,\n\t\tCurrencyRateID as integer,\n\t\tSubTotal as decimal(19,4),\n\t\tTaxAmt as decimal(19,4),\n\t\tFreight as decimal(19,4),\n\t\tTotalDue as decimal(19,4),\n\t\tComment as string,\n\t\trowguid as string,\n\t\tRead_Flag as string,\n\t\tLast_Modified_Date as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT TOP (1000) [SalesOrderID]\\n      ,[RevisionNumber]\\n      ,[OrderDate]\\n      ,[DueDate]\\n      ,[ShipDate]\\n      ,[Status]\\n      ,[OnlineOrderFlag]\\n      ,[SalesOrderNumber]\\n      ,[PurchaseOrderNumber]\\n      ,[AccountNumber]\\n      ,[CustomerID]\\n      ,[SalesPersonID]\\n      ,[TerritoryID]\\n      ,[BillToAddressID]\\n      ,[ShipToAddressID]\\n      ,[ShipMethodID]\\n      ,[CreditCardID]\\n      ,[CreditCardApprovalCode]\\n      ,[CurrencyRateID]\\n      ,[SubTotal]\\n      ,[TaxAmt]\\n      ,[Freight]\\n      ,[TotalDue]\\n      ,[Comment]\\n      ,[rowguid]\\n      ,\\'1\\' as [Read_Flag]\\n      ,getdate() as [Last_Modified_Date]\\n  FROM [Sales].[SalesOrderHeader] where Read_Flag IS NULL OR Read_Flag=0',\n\tformat: 'query') ~> source1\nsource1 alterRow(updateIf(Read_Flag=='1')) ~> AlterRow1\nAlterRow1 sink(input(\n\t\tSalesOrderID as integer,\n\t\tRevisionNumber as integer,\n\t\tOrderDate as timestamp,\n\t\tDueDate as timestamp,\n\t\tShipDate as timestamp,\n\t\tStatus as integer,\n\t\tOnlineOrderFlag as boolean,\n\t\tSalesOrderNumber as string,\n\t\tPurchaseOrderNumber as string,\n\t\tAccountNumber as string,\n\t\tCustomerID as integer,\n\t\tSalesPersonID as integer,\n\t\tTerritoryID as integer,\n\t\tBillToAddressID as integer,\n\t\tShipToAddressID as integer,\n\t\tShipMethodID as integer,\n\t\tCreditCardID as integer,\n\t\tCreditCardApprovalCode as string,\n\t\tCurrencyRateID as integer,\n\t\tSubTotal as decimal(19,4),\n\t\tTaxAmt as decimal(19,4),\n\t\tFreight as decimal(19,4),\n\t\tTotalDue as decimal(19,4),\n\t\tComment as string,\n\t\trowguid as string,\n\t\tModifiedDate as timestamp,\n\t\tRead_Flag as boolean,\n\t\tLast_Modified_Date as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['SalesOrderID'],\n\tskipKeyWrites:true,\n\tformat: 'table',\n\tmapColumn(\n\t\tSalesOrderID,\n\t\tRead_Flag,\n\t\tLast_Modified_Date\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_SalesOrderDetail')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SalesOrderDetail",
								"type": "DatasetReference"
							},
							"name": "SalesDetailSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SalesDetail_1000",
								"type": "DatasetReference"
							},
							"name": "SalesDetailTarget"
						}
					],
					"transformations": [],
					"script": "source(output(\n\t\tSalesOrderID as integer,\n\t\tSalesOrderDetailID as integer,\n\t\tCarrierTrackingNumber as string,\n\t\tOrderQty as short,\n\t\tProductID as integer,\n\t\tSpecialOfferID as integer,\n\t\tUnitPrice as decimal(19,4),\n\t\tUnitPriceDiscount as decimal(19,4),\n\t\tLineTotal as decimal(38,6),\n\t\trowguid as string,\n\t\tModifiedDate as timestamp,\n\t\tLast_Modified_Date as timestamp,\n\t\tRead_Flag as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: '\\nSELECT TOP (1000) [SalesOrderID]\\n      ,[SalesOrderDetailID]\\n      ,[CarrierTrackingNumber]\\n      ,[OrderQty]\\n      ,[ProductID]\\n      ,[SpecialOfferID]\\n      ,[UnitPrice]\\n      ,[UnitPriceDiscount]\\n      ,[LineTotal]\\n      ,[rowguid]\\n      , [ModifiedDate]\\n\t  ,getdate() as Last_Modified_Date\\n      ,\\'1\\' as [Read_Flag]\\n  FROM [Sales].[SalesOrderDetail] where Read_Flag IS NULL',\n\tformat: 'query') ~> SalesDetailSource\nSalesDetailSource sink(input(\n\t\tSalesOrderID as string,\n\t\tSalesOrderDetailID as string,\n\t\tCarrierTrackingNumber as string,\n\t\tOrderQty as string,\n\t\tProductID as string,\n\t\tSpecialOfferID as string,\n\t\tUnitPrice as double,\n\t\tUnitPriceDiscount as double,\n\t\tLineTotal as double,\n\t\trowguid as string,\n\t\tModifiedDate as string,\n\t\tLast_Modified_Date as string,\n\t\tRead_Flag as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['SalesDetail_Incremental'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SalesDetailTarget"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_ditinct')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_InputEmp",
								"type": "DatasetReference"
							},
							"name": "emp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Aggregate1"
						}
					],
					"script": "source(output(\n\t\tempid as string,\n\t\tname as string,\n\t\tcountry as string,\n\t\tdepartment as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> emp\nemp aggregate(groupBy(department),\n\teach(match(name!='department'), $$ = first($$))) ~> Aggregate1\nAggregate1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['distrow.csv'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dimProduct_Pragmatic')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Product_Staging",
								"type": "DatasetReference"
							},
							"name": "SourceData"
						},
						{
							"dataset": {
								"referenceName": "dimProduct",
								"type": "DatasetReference"
							},
							"name": "ExistingRecords"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dimProduct",
								"type": "DatasetReference"
							},
							"name": "InsertTarget"
						},
						{
							"dataset": {
								"referenceName": "dimProduct",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "ExistingRecordsz"
						},
						{
							"name": "SourceFileHash"
						},
						{
							"name": "Exists1"
						},
						{
							"name": "ExistingRecordszHash"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "ConditionalSplit"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "UpdateDerivedColumn"
						},
						{
							"name": "AlterRow2"
						}
					],
					"script": "source(output(\n\t\tProductAlternateKey as string,\n\t\tProductSubcategoryKey as integer,\n\t\tWeightUnitMeasureCode as string,\n\t\tSizeUnitMeasureCode as string,\n\t\tEnglishProductName as string,\n\t\tSpanishProductName as integer,\n\t\t{[FrenchProductName} as integer,\n\t\tStandardCost as decimal(19,4),\n\t\tFinishedGoodsFlag as boolean,\n\t\tColor as string,\n\t\tSafetyStockLevel as short,\n\t\tReorderPoint as short,\n\t\tListPrice as decimal(19,4),\n\t\tSize as string,\n\t\t{[SizeRange} as integer,\n\t\tWeight as decimal(8,2),\n\t\tDaysToManufacture as integer,\n\t\tProductLine as string,\n\t\t{[DealerPrice} as integer,\n\t\tClass as string,\n\t\tStyle as string,\n\t\t{[ModelName} as integer,\n\t\t{[LargePhoto} as integer,\n\t\t{[EnglishDescription} as integer,\n\t\t{[FrenchDescription} as integer,\n\t\t{[ChineseDescription} as integer,\n\t\t{[ArabicDescription} as integer,\n\t\t{[HebrewDescription} as integer,\n\t\t{[ThaiDescription} as integer,\n\t\t{[GermanDescription} as integer,\n\t\t{[JapaneseDescription} as integer,\n\t\t{[TurkishDescription} as integer,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\t{[Status} as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: '\\nSELECT \\n      P.[ProductNumber] as [ProductAlternateKey]\\n      ,PS.[ProductSubcategoryID] as [ProductSubcategoryKey]\\n      ,[WeightUnitMeasureCode] as [WeightUnitMeasureCode]\\n      ,[SizeUnitMeasureCode] as [SizeUnitMeasureCode]\\n      ,P.[Name] as [EnglishProductName]\\n      ,NULL as [SpanishProductName]\\n      ,NULL as [[FrenchProductName]\\n      ,[StandardCost]\\n      , [FinishedGoodsFlag] \\n\t        ,[Color] as [Color]\\n      ,[SafetyStockLevel]as [SafetyStockLevel]\\n      ,[ReorderPoint] as [ReorderPoint]\\n      ,[ListPrice] as [ListPrice]\\n      ,[Size]\\n      ,NULL as [[SizeRange]\\n      ,[Weight]\\n      ,[DaysToManufacture]\\n      ,[ProductLine]\\n      ,NULL as [[DealerPrice]\\n      ,[Class]\\n      ,[Style]\\n      ,NULL as [[ModelName]\\n      ,NULL as [[LargePhoto]\\n      ,NULL as [[EnglishDescription]\\n      ,NULL as [[FrenchDescription]\\n      ,NULL as [[ChineseDescription]\\n      ,NULL as [[ArabicDescription]\\n      ,NULL as [[HebrewDescription]\\n      ,NULL as [[ThaiDescription]\\n      ,NULL as [[GermanDescription]\\n      ,NULL as [[JapaneseDescription]\\n      ,NULL as [[TurkishDescription]\\n      ,[SellStartDate] as [StartDate]\\n      ,[SellEndDate] as [EndDate]\\n      ,NULL as [[Status]\\n  FROM [dbo].[Product] P\\n  LEFT join [dbo].[ProductSubcategory] PS ON P.[ProductSubcategoryID]=PS.[ProductSubcategoryID]',\n\tformat: 'query') ~> SourceData\nsource(output(\n\t\tProductKey as integer,\n\t\tProductAlternateKey as string,\n\t\tProductSubcategoryKey as integer,\n\t\tColor as string,\n\t\tSize as string,\n\t\tWeight as double,\n\t\tStatus as string,\n\t\tisCurrent as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT [ProductKey]\\n      ,[ProductAlternateKey]\\n      ,[ProductSubcategoryKey]\\n      ,[Color]\\n      ,[Size]\\n      ,[Weight]\\n      ,[Status]\\n\t  ,isCurrent\\n  FROM [AW_Data_Warehouse].[dbo].[DimProduct]',\n\tformat: 'query') ~> ExistingRecords\nExistingRecords select(mapColumn(\n\t\tExisting_ProductKey = ProductKey,\n\t\tExisting_ProductAlternateKey = ProductAlternateKey,\n\t\tExisting_ProductSubcategoryKey = ProductSubcategoryKey,\n\t\tExisting_Color = Color,\n\t\tExisting_Size = Size,\n\t\tExisting_Weight = Weight,\n\t\tExisting_Status = Status,\n\t\tExisting_isCurrent = isCurrent\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ExistingRecordsz\nSourceData derive(SourceType1RecordHash = sha1(256,ProductAlternateKey,Weight,Color)) ~> SourceFileHash\nSourceFileHash, ExistingRecordszHash exists(SourceType1RecordHash == ExistingRecordsHash,\n\tnegate:false,\n\tbroadcast: 'auto')~> Exists1\nExistingRecordsz derive(ExistingRecordsHash = sha1(256,Existing_ProductAlternateKey,Existing_Weight,Existing_Color)) ~> ExistingRecordszHash\nExists1, ExistingRecordszHash lookup(ProductAlternateKey == Existing_ProductAlternateKey,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nLookup1 split(isNull(Existing_ProductKey),\n\tdisjoint: false) ~> ConditionalSplit@(NewItems, UpdatedItems)\nConditionalSplit@NewItems derive(isCurrent = '1') ~> DerivedColumn1\nDerivedColumn1 alterRow(insertIf(1==1)) ~> AlterRow1\nConditionalSplit@UpdatedItems derive(Last_Modified_Date = currentDate()) ~> UpdateDerivedColumn\nUpdateDerivedColumn alterRow(updateIf(1==1)) ~> AlterRow2\nAlterRow1 sink(input(\n\t\tProductKey as integer,\n\t\tProductAlternateKey as string,\n\t\tProductSubcategoryKey as integer,\n\t\tWeightUnitMeasureCode as string,\n\t\tSizeUnitMeasureCode as string,\n\t\tEnglishProductName as string,\n\t\tSpanishProductName as string,\n\t\tFrenchProductName as string,\n\t\tStandardCost as decimal(19,4),\n\t\tFinishedGoodsFlag as boolean,\n\t\tColor as string,\n\t\tSafetyStockLevel as integer,\n\t\tReorderPoint as integer,\n\t\tListPrice as decimal(19,4),\n\t\tSize as string,\n\t\tSizeRange as string,\n\t\tWeight as double,\n\t\tDaysToManufacture as integer,\n\t\tProductLine as string,\n\t\tDealerPrice as decimal(19,4),\n\t\tClass as string,\n\t\tStyle as string,\n\t\tModelName as string,\n\t\tLargePhoto as binary,\n\t\tEnglishDescription as string,\n\t\tFrenchDescription as string,\n\t\tChineseDescription as string,\n\t\tArabicDescription as string,\n\t\tHebrewDescription as string,\n\t\tThaiDescription as string,\n\t\tGermanDescription as string,\n\t\tJapaneseDescription as string,\n\t\tTurkishDescription as string,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tStatus as string,\n\t\tiscurrent as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tProductAlternateKey,\n\t\tProductSubcategoryKey,\n\t\tWeightUnitMeasureCode,\n\t\tSizeUnitMeasureCode,\n\t\tEnglishProductName,\n\t\tSpanishProductName,\n\t\tFrenchProductName = {[FrenchProductName},\n\t\tStandardCost,\n\t\tFinishedGoodsFlag,\n\t\tColor,\n\t\tSafetyStockLevel,\n\t\tReorderPoint,\n\t\tListPrice,\n\t\tSize,\n\t\tSizeRange = {[SizeRange},\n\t\tWeight,\n\t\tDaysToManufacture,\n\t\tProductLine,\n\t\tDealerPrice = {[DealerPrice},\n\t\tClass,\n\t\tStyle,\n\t\tModelName = {[ModelName},\n\t\tLargePhoto = {[LargePhoto},\n\t\tEnglishDescription = {[EnglishDescription},\n\t\tFrenchDescription = {[FrenchDescription},\n\t\tChineseDescription = {[ChineseDescription},\n\t\tArabicDescription = {[ArabicDescription},\n\t\tHebrewDescription = {[HebrewDescription},\n\t\tThaiDescription = {[ThaiDescription},\n\t\tGermanDescription = {[GermanDescription},\n\t\tJapaneseDescription = {[JapaneseDescription},\n\t\tTurkishDescription = {[TurkishDescription},\n\t\tStartDate,\n\t\tEndDate,\n\t\tStatus = {[Status},\n\t\tiscurrent = isCurrent\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> InsertTarget\nAlterRow2 sink(input(\n\t\tProductKey as integer,\n\t\tProductAlternateKey as string,\n\t\tProductSubcategoryKey as integer,\n\t\tWeightUnitMeasureCode as string,\n\t\tSizeUnitMeasureCode as string,\n\t\tEnglishProductName as string,\n\t\tSpanishProductName as string,\n\t\tFrenchProductName as string,\n\t\tStandardCost as decimal(19,4),\n\t\tFinishedGoodsFlag as boolean,\n\t\tColor as string,\n\t\tSafetyStockLevel as integer,\n\t\tReorderPoint as integer,\n\t\tListPrice as decimal(19,4),\n\t\tSize as string,\n\t\tSizeRange as string,\n\t\tWeight as double,\n\t\tDaysToManufacture as integer,\n\t\tProductLine as string,\n\t\tDealerPrice as decimal(19,4),\n\t\tClass as string,\n\t\tStyle as string,\n\t\tModelName as string,\n\t\tLargePhoto as binary,\n\t\tEnglishDescription as string,\n\t\tFrenchDescription as string,\n\t\tChineseDescription as string,\n\t\tArabicDescription as string,\n\t\tHebrewDescription as string,\n\t\tThaiDescription as string,\n\t\tGermanDescription as string,\n\t\tJapaneseDescription as string,\n\t\tTurkishDescription as string,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tStatus as string,\n\t\tiscurrent as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['ProductAlternateKey'],\n\tskipKeyWrites:true,\n\tformat: 'table',\n\tmapColumn(\n\t\tColor,\n\t\tSizeRange = Size,\n\t\tDaysToManufacture,\n\t\tProductAlternateKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/flattenDF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_empJSON",
								"type": "DatasetReference"
							},
							"name": "empJson"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Flatten1"
						}
					],
					"script": "source(output(\n\t\tid as string,\n\t\tname as string,\n\t\tskills as string[],\n\t\tAddress as (state as string, country as string, zipcode as string),\n\t\tContact as (Phone as string, email as string)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tsingleDocument: true) ~> empJson\nempJson foldDown(unroll(skills),\n\tmapColumn(\n\t\tid,\n\t\tname,\n\t\tskills,\n\t\tstate = Address.state,\n\t\tContact = Contact.Phone\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Flatten1\nFlatten1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['faltten.csv'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/lookupDF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_InputDep",
								"type": "DatasetReference"
							},
							"name": "dep"
						},
						{
							"dataset": {
								"referenceName": "ds_InputEmp",
								"type": "DatasetReference"
							},
							"name": "emp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Lookup1"
						}
					],
					"script": "source(output(\n\t\tdepid as string,\n\t\tdepname as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> dep\nsource(output(\n\t\tempid as string,\n\t\tname as string,\n\t\tcountry as string,\n\t\tdepartment as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> emp\ndep, emp lookup(depid == department,\n\tmultiple: true,\n\tbroadcast: 'auto')~> Lookup1\nLookup1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['LookupEmp.csv'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_IncrementalLoad')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_Update_SalesOrderHeader",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "df_SalesOrderHeader_1000",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_SalesHeader",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					},
					{
						"name": "df_SalesOrderHeader_1000",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Load_SalesOrder_Header_json",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"SalesHeader1000": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					},
					{
						"name": "df_Sales_Detail_1000",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_SalesOrderDetail",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SalesDetailSource": {},
									"SalesDetailTarget": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					},
					{
						"name": "df_Update_SalesDetail",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "df_Sales_Detail_1000",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_SalesDetail_Update",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SaleDetailSource": {},
									"SalesDetailTarget": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_SalesHeader')]",
				"[concat(variables('factoryId'), '/dataflows/df_SalesOrderDetail')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_Load_Dimensions')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DimProduct",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ProductSource": {},
									"dimProductSource": {},
									"sink1": {},
									"sink2": {},
									"sink3": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_SCD2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dimProduct_Pragmatic",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceData": {},
									"ExistingRecords": {},
									"InsertTarget": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dimProduct_Pragmatic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TriggerA')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "ppl_CopyTables",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 5,
					"startTime": "2020-06-12T08:44:00Z",
					"endTime": "2020-06-13T01:00:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": [
						{
							"type": "SelfDependencyTumblingWindowTriggerReference",
							"offset": "-00:05:00"
						}
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tgr_Daily_Overnight')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "ppl_LoadStaging",
							"type": "PipelineReference"
						},
						"parameters": {}
					},
					{
						"pipelineReference": {
							"referenceName": "ppl_IncrementalLoad",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 3,
						"startTime": "2020-06-11T22:00:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/ppl_IncrementalLoad')]"
			]
		}
	]
}